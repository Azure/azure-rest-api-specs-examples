package armautomation_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/automation/armautomation"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/432872fac1d0f8edcae98a0e8504afc0ee302710/specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listSchedulesByAutomationAccount_Next100.json
func ExampleScheduleClient_NewListByAutomationAccountPager_listSchedulesByAutomationAccountNext100() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armautomation.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewScheduleClient().NewListByAutomationAccountPager("rg", "myAutomationAccount33", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.ScheduleListResult = armautomation.ScheduleListResult{
		// 	Value: []*armautomation.Schedule{
		// 		{
		// 			Name: to.Ptr("mySchedule3"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule3"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:18.120Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:18.120Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule30"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule30"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:27.277Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:27.277Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule31"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule31"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:27.603Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:27.603Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule32"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule32"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:28.040Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:28.040Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule33"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule33"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:28.353Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:28.353Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule34"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule34"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:28.667Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:28.667Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule35"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule35"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.010Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.010Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule36"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule36"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.353Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.353Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule37"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule37"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.680Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.680Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule38"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule38"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.993Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.993Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule39"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule39"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:30.307Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:30.307Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule4"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule4"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:18.417Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:18.417Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule40"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule40"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:30.620Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:30.620Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule41"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule41"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:30.930Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:30.930Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule42"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule42"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:31.260Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:31.260Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule43"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule43"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:31.573Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:31.573Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule44"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule44"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:31.947Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:31.947Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule45"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule45"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:32.290Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:32.290Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule46"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule46"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:32.603Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:32.603Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule47"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule47"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:32.930Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:32.930Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule48"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule48"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:33.510Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:33.510Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule49"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule49"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:33.823Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:33.823Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule5"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule5"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:18.743Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:18.743Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule50"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule50"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:34.150Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:34.150Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule51"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule51"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:34.447Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:34.447Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule52"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule52"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:34.743Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:34.743Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule53"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule53"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.057Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.057Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule54"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule54"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.370Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.370Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule55"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule55"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.683Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.683Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule56"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule56"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.980Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.980Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule57"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule57"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:36.277Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:36.277Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule58"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule58"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:36.603Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:36.603Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule59"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule59"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:36.947Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:36.947Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule6"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule6"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:19.103Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:19.103Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule60"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule60"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:37.260Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:37.260Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule61"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule61"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:37.557Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:37.557Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule62"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule62"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:37.963Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:37.963Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule63"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule63"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:38.290Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:38.290Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule64"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule64"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:38.603Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:38.603Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule65"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule65"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:38.917Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:38.917Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule66"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule66"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:39.307Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:39.307Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule67"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule67"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:39.590Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:39.590Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule68"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule68"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:39.947Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:39.947Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule69"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule69"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:40.307Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:40.307Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule7"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule7"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:19.510Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:19.510Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule70"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule70"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:40.667Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:40.667Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule71"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule71"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.010Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.010Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule72"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule72"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.323Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.323Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule73"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule73"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.637Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.637Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule74"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule74"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.933Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.933Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule75"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule75"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:42.260Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:42.260Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule76"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule76"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:42.573Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:42.573Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule77"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule77"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:42.900Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:42.900Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule78"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule78"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:43.213Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:43.213Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule79"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule79"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:43.573Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:43.573Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule8"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule8"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:19.837Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:19.837Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule80"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule80"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:43.870Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:43.870Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule81"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule81"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:44.197Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:44.197Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule82"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule82"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:44.493Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:44.493Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule83"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule83"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:44.807Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:44.807Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule84"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule84"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:45.183Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:45.183Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule85"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule85"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:45.493Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:45.493Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule86"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule86"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:45.790Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:45.790Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule87"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule87"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:46.090Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:46.090Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule88"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule88"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:46.370Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:46.370Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule89"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule89"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:46.887Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:46.887Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule9"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule9"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:20.150Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:20.150Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule90"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule90"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:47.183Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:47.183Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule91"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule91"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:47.493Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:47.493Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule92"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule92"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:47.760Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:47.760Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule93"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule93"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.073Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.073Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule94"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule94"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.353Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.353Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule95"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule95"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.683Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.683Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule96"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule96"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.963Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.963Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule97"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule97"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:49.243Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:49.243Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule98"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule98"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:49.510Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:49.510Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule99"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule99"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:49.790Z"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00.000Z"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:49.790Z"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00.000Z"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 	}},
		// }
	}
}
