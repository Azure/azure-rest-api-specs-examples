package armhardwaresecuritymodules_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hardwaresecuritymodules/armhardwaresecuritymodules/v2"
)

// Generated from example definition: 2025-03-31/CloudHsmCluster_ListByResourceGroup_MaximumSet_Gen.json
func ExampleCloudHsmClustersClient_NewListByResourceGroupPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhardwaresecuritymodules.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewCloudHsmClustersClient().NewListByResourceGroupPager("rgcloudhsm", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armhardwaresecuritymodules.CloudHsmClustersClientListByResourceGroupResponse{
		// 	CloudHsmClusterListResult: armhardwaresecuritymodules.CloudHsmClusterListResult{
		// 		NextLink: to.Ptr("https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rgcloudhsm/providers/Microsoft.HardwareSecurityModules/cloudHsmClusters?api-version=2022-03-31&$skiptoken=dmF1bHQtcGVza3ktanVyeS03MzA3Ng=="),
		// 		Value: []*armhardwaresecuritymodules.CloudHsmCluster{
		// 			{
		// 				Name: to.Ptr("chsm1"),
		// 				Type: to.Ptr("Microsoft.HardwareSecurityModules/cloudHsmClusters"),
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rgcloudhsm/providers/Microsoft.HardwareSecurityModules/cloudHsmClusters/chsm1"),
		// 				Identity: &armhardwaresecuritymodules.ManagedServiceIdentity{
		// 					Type: to.Ptr(armhardwaresecuritymodules.ManagedServiceIdentityTypeUserAssigned),
		// 					UserAssignedIdentities: map[string]*armhardwaresecuritymodules.UserAssignedIdentity{
		// 						"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso-resources/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-1": &armhardwaresecuritymodules.UserAssignedIdentity{
		// 							ClientID: to.Ptr("00000000-0000-0000-0000-000000000000"),
		// 							PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
		// 						},
		// 					},
		// 				},
		// 				Location: to.Ptr("eastus2"),
		// 				Properties: &armhardwaresecuritymodules.CloudHsmClusterProperties{
		// 					ActivationState: to.Ptr(armhardwaresecuritymodules.ActivationState("null")),
		// 					AutoGeneratedDomainNameLabelScope: to.Ptr(armhardwaresecuritymodules.AutoGeneratedDomainNameLabelScopeTenantReuse),
		// 					ProvisioningState: to.Ptr(armhardwaresecuritymodules.ProvisioningStateSucceeded),
		// 					PublicNetworkAccess: to.Ptr(armhardwaresecuritymodules.PublicNetworkAccessDisabled),
		// 					StatusMessage: to.Ptr("This is a status message"),
		// 				},
		// 				SKU: &armhardwaresecuritymodules.CloudHsmClusterSKU{
		// 					Name: to.Ptr(armhardwaresecuritymodules.CloudHsmClusterSKUNameStandardB1),
		// 					Family: to.Ptr(armhardwaresecuritymodules.CloudHsmClusterSKUFamilyB),
		// 				},
		// 				SystemData: &armhardwaresecuritymodules.SystemData{
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-09-12T12:00:00.0000000Z"); return t}()),
		// 					CreatedBy: to.Ptr("CHsmUser1"),
		// 					CreatedByType: to.Ptr(armhardwaresecuritymodules.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-09-12T12:00:00.0000000Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("CHsmUser2"),
		// 					LastModifiedByType: to.Ptr(armhardwaresecuritymodules.CreatedByTypeUser),
		// 				},
		// 				Tags: map[string]*string{
		// 					"Dept": to.Ptr("hsm"),
		// 					"Environment": to.Ptr("dogfood"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("chsm2"),
		// 				Type: to.Ptr("Microsoft.HardwareSecurityModules/cloudHsmClusters"),
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rgcloudhsm/providers/Microsoft.HardwareSecurityModules/cloudHsmClusters/chsm2"),
		// 				Identity: &armhardwaresecuritymodules.ManagedServiceIdentity{
		// 					Type: to.Ptr(armhardwaresecuritymodules.ManagedServiceIdentityTypeUserAssigned),
		// 					UserAssignedIdentities: map[string]*armhardwaresecuritymodules.UserAssignedIdentity{
		// 						"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso-resources/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-2": &armhardwaresecuritymodules.UserAssignedIdentity{
		// 							ClientID: to.Ptr("00000000-0000-0000-0000-000000000000"),
		// 							PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
		// 						},
		// 					},
		// 				},
		// 				Location: to.Ptr("eastus2"),
		// 				Properties: &armhardwaresecuritymodules.CloudHsmClusterProperties{
		// 					ActivationState: to.Ptr(armhardwaresecuritymodules.ActivationState("null")),
		// 					AutoGeneratedDomainNameLabelScope: to.Ptr(armhardwaresecuritymodules.AutoGeneratedDomainNameLabelScopeTenantReuse),
		// 					ProvisioningState: to.Ptr(armhardwaresecuritymodules.ProvisioningStateSucceeded),
		// 					PublicNetworkAccess: to.Ptr(armhardwaresecuritymodules.PublicNetworkAccessDisabled),
		// 				},
		// 				SKU: &armhardwaresecuritymodules.CloudHsmClusterSKU{
		// 					Name: to.Ptr(armhardwaresecuritymodules.CloudHsmClusterSKUNameStandardB1),
		// 					Family: to.Ptr(armhardwaresecuritymodules.CloudHsmClusterSKUFamilyB),
		// 				},
		// 				SystemData: &armhardwaresecuritymodules.SystemData{
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-09-12T12:00:00.0000000Z"); return t}()),
		// 					CreatedBy: to.Ptr("CHsmUser1"),
		// 					CreatedByType: to.Ptr(armhardwaresecuritymodules.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-09-12T12:00:00.0000000Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("CHsmUser2"),
		// 					LastModifiedByType: to.Ptr(armhardwaresecuritymodules.CreatedByTypeUser),
		// 				},
		// 				Tags: map[string]*string{
		// 					"Dept": to.Ptr("hsm"),
		// 					"Environment": to.Ptr("dogfood"),
		// 				},
		// 			},
		// 		},
		// 	},
		// }
	}
}
