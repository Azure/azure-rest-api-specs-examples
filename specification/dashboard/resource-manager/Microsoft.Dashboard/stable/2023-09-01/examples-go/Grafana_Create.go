package armdashboard_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/dashboard/armdashboard"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/78eac0bd58633028293cb1ec1709baa200bed9e2/specification/dashboard/resource-manager/Microsoft.Dashboard/stable/2023-09-01/examples/Grafana_Create.json
func ExampleGrafanaClient_BeginCreate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armdashboard.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewGrafanaClient().BeginCreate(ctx, "myResourceGroup", "myWorkspace", armdashboard.ManagedGrafana{
		Identity: &armdashboard.ManagedServiceIdentity{
			Type: to.Ptr(armdashboard.ManagedServiceIdentityTypeSystemAssigned),
		},
		Location: to.Ptr("West US"),
		Properties: &armdashboard.ManagedGrafanaProperties{
			APIKey:                  to.Ptr(armdashboard.APIKeyEnabled),
			DeterministicOutboundIP: to.Ptr(armdashboard.DeterministicOutboundIPEnabled),
			EnterpriseConfigurations: &armdashboard.EnterpriseConfigurations{
				MarketplaceAutoRenew: to.Ptr(armdashboard.MarketplaceAutoRenewEnabled),
				MarketplacePlanID:    to.Ptr("myPlanId"),
			},
			GrafanaConfigurations: &armdashboard.GrafanaConfigurations{
				SMTP: &armdashboard.SMTP{
					Enabled:        to.Ptr(true),
					FromAddress:    to.Ptr("test@sendemail.com"),
					FromName:       to.Ptr("emailsender"),
					Host:           to.Ptr("smtp.sendemail.com:587"),
					Password:       to.Ptr("<password>"),
					SkipVerify:     to.Ptr(true),
					StartTLSPolicy: to.Ptr(armdashboard.StartTLSPolicyOpportunisticStartTLS),
					User:           to.Ptr("username"),
				},
			},
			GrafanaIntegrations: &armdashboard.GrafanaIntegrations{
				AzureMonitorWorkspaceIntegrations: []*armdashboard.AzureMonitorWorkspaceIntegration{
					{
						AzureMonitorWorkspaceResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.monitor/accounts/myAzureMonitorWorkspace"),
					}},
			},
			GrafanaMajorVersion: to.Ptr("9"),
			GrafanaPlugins: map[string]*armdashboard.GrafanaPlugin{
				"sample-plugin-id": {},
			},
			PublicNetworkAccess: to.Ptr(armdashboard.PublicNetworkAccessEnabled),
			ZoneRedundancy:      to.Ptr(armdashboard.ZoneRedundancyEnabled),
		},
		SKU: &armdashboard.ResourceSKU{
			Name: to.Ptr("Standard"),
		},
		Tags: map[string]*string{
			"Environment": to.Ptr("Dev"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.ManagedGrafana = armdashboard.ManagedGrafana{
	// 	Name: to.Ptr("myWorkspace"),
	// 	Type: to.Ptr("Microsoft.Dashboard/grafana"),
	// 	ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/grafana/myWorkspace"),
	// 	Identity: &armdashboard.ManagedServiceIdentity{
	// 		Type: to.Ptr(armdashboard.ManagedServiceIdentityTypeSystemAssigned),
	// 	},
	// 	Location: to.Ptr("West US"),
	// 	Properties: &armdashboard.ManagedGrafanaProperties{
	// 		APIKey: to.Ptr(armdashboard.APIKeyEnabled),
	// 		AutoGeneratedDomainNameLabelScope: to.Ptr(armdashboard.AutoGeneratedDomainNameLabelScopeTenantReuse),
	// 		DeterministicOutboundIP: to.Ptr(armdashboard.DeterministicOutboundIPEnabled),
	// 		Endpoint: to.Ptr("https://myworkspace-abcdefghijklmnop.wus.grafana.azure.com"),
	// 		EnterpriseConfigurations: &armdashboard.EnterpriseConfigurations{
	// 			MarketplaceAutoRenew: to.Ptr(armdashboard.MarketplaceAutoRenewEnabled),
	// 			MarketplacePlanID: to.Ptr("myPlanId"),
	// 		},
	// 		GrafanaConfigurations: &armdashboard.GrafanaConfigurations{
	// 			SMTP: &armdashboard.SMTP{
	// 				Enabled: to.Ptr(true),
	// 				FromAddress: to.Ptr("test@sendemail.com"),
	// 				FromName: to.Ptr("emailsender"),
	// 				Host: to.Ptr("smtp.sendemail.com:587"),
	// 				SkipVerify: to.Ptr(true),
	// 				StartTLSPolicy: to.Ptr(armdashboard.StartTLSPolicyOpportunisticStartTLS),
	// 				User: to.Ptr("username"),
	// 			},
	// 		},
	// 		GrafanaIntegrations: &armdashboard.GrafanaIntegrations{
	// 			AzureMonitorWorkspaceIntegrations: []*armdashboard.AzureMonitorWorkspaceIntegration{
	// 				{
	// 					AzureMonitorWorkspaceResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.monitor/accounts/myAzureMonitorWorkspace"),
	// 			}},
	// 		},
	// 		GrafanaMajorVersion: to.Ptr("9"),
	// 		GrafanaPlugins: map[string]*armdashboard.GrafanaPlugin{
	// 			"sample-plugin-id": &armdashboard.GrafanaPlugin{
	// 				PluginID: to.Ptr("sample-plugin-id"),
	// 			},
	// 		},
	// 		GrafanaVersion: to.Ptr("9.4.5"),
	// 		OutboundIPs: []*string{
	// 			to.Ptr("192.168.0.1"),
	// 			to.Ptr("192.168.0.2")},
	// 			ProvisioningState: to.Ptr(armdashboard.ProvisioningStateSucceeded),
	// 			PublicNetworkAccess: to.Ptr(armdashboard.PublicNetworkAccessEnabled),
	// 			ZoneRedundancy: to.Ptr(armdashboard.ZoneRedundancyEnabled),
	// 		},
	// 		SKU: &armdashboard.ResourceSKU{
	// 			Name: to.Ptr("Standard"),
	// 		},
	// 		SystemData: &armdashboard.SystemData{
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.107Z"); return t}()),
	// 			CreatedBy: to.Ptr("string"),
	// 			CreatedByType: to.Ptr(armdashboard.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.197Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("string"),
	// 			LastModifiedByType: to.Ptr(armdashboard.CreatedByTypeUser),
	// 		},
	// 		Tags: map[string]*string{
	// 			"Environment": to.Ptr("Dev"),
	// 		},
	// 	}
}
