package armservicefabricmanagedclusters_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicefabricmanagedclusters/armservicefabricmanagedclusters"
)

// Generated from example definition: 2025-03-01-preview/ManagedClusterPutOperation_example_max.json
func ExampleManagedClustersClient_BeginCreateOrUpdate_putAClusterWithMaximumParameters() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewManagedClustersClient().BeginCreateOrUpdate(ctx, "resRg", "mycluster", armservicefabricmanagedclusters.ManagedCluster{
		Location: to.Ptr("eastus"),
		Properties: &armservicefabricmanagedclusters.ManagedClusterProperties{
			AddonFeatures: []*armservicefabricmanagedclusters.ManagedClusterAddOnFeature{
				to.Ptr(armservicefabricmanagedclusters.ManagedClusterAddOnFeatureDNSService),
				to.Ptr(armservicefabricmanagedclusters.ManagedClusterAddOnFeatureBackupRestoreService),
				to.Ptr(armservicefabricmanagedclusters.ManagedClusterAddOnFeatureResourceMonitorService),
			},
			AdminPassword:          to.Ptr("{vm-password}"),
			AdminUserName:          to.Ptr("vmadmin"),
			AllocatedOutboundPorts: to.Ptr[int32](0),
			AllowRdpAccess:         to.Ptr(true),
			ApplicationTypeVersionsCleanupPolicy: &armservicefabricmanagedclusters.ApplicationTypeVersionsCleanupPolicy{
				MaxUnusedVersionsToKeep: to.Ptr[int32](3),
			},
			AutoGeneratedDomainNameLabelScope: to.Ptr(armservicefabricmanagedclusters.AutoGeneratedDomainNameLabelScopeSubscriptionReuse),
			AuxiliarySubnets: []*armservicefabricmanagedclusters.Subnet{
				{
					Name:                              to.Ptr("testSubnet1"),
					EnableIPv6:                        to.Ptr(true),
					NetworkSecurityGroupID:            to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/networkSecurityGroups/sn1"),
					PrivateEndpointNetworkPolicies:    to.Ptr(armservicefabricmanagedclusters.PrivateEndpointNetworkPoliciesEnabled),
					PrivateLinkServiceNetworkPolicies: to.Ptr(armservicefabricmanagedclusters.PrivateLinkServiceNetworkPoliciesEnabled),
				},
			},
			ClientConnectionPort:               to.Ptr[int32](19000),
			ClusterCodeVersion:                 to.Ptr("7.1.168.9494"),
			ClusterUpgradeMode:                 to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeModeManual),
			DdosProtectionPlanID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/ddosProtectionPlans/myDDoSProtectionPlan"),
			DNSName:                            to.Ptr("mycluster"),
			EnableAutoOSUpgrade:                to.Ptr(true),
			EnableHTTPGatewayExclusiveAuthMode: to.Ptr(true),
			EnableIPv6:                         to.Ptr(true),
			FabricSettings: []*armservicefabricmanagedclusters.SettingsSectionDescription{
				{
					Name: to.Ptr("ManagedIdentityTokenService"),
					Parameters: []*armservicefabricmanagedclusters.SettingsParameterDescription{
						{
							Name:  to.Ptr("IsEnabled"),
							Value: to.Ptr("true"),
						},
					},
				},
			},
			HTTPGatewayConnectionPort:          to.Ptr[int32](19080),
			HTTPGatewayTokenAuthConnectionPort: to.Ptr[int32](19081),
			IPTags: []*armservicefabricmanagedclusters.IPTag{
				{
					IPTagType: to.Ptr("FirstPartyUsage"),
					Tag:       to.Ptr("SQL"),
				},
			},
			LoadBalancingRules: []*armservicefabricmanagedclusters.LoadBalancingRule{
				{
					BackendPort:   to.Ptr[int32](80),
					FrontendPort:  to.Ptr[int32](80),
					ProbePort:     to.Ptr[int32](80),
					ProbeProtocol: to.Ptr(armservicefabricmanagedclusters.ProbeProtocolHTTP),
					Protocol:      to.Ptr(armservicefabricmanagedclusters.Protocol("http")),
				},
				{
					BackendPort:   to.Ptr[int32](443),
					FrontendPort:  to.Ptr[int32](443),
					ProbePort:     to.Ptr[int32](443),
					ProbeProtocol: to.Ptr(armservicefabricmanagedclusters.ProbeProtocolHTTP),
					Protocol:      to.Ptr(armservicefabricmanagedclusters.Protocol("http")),
				},
				{
					BackendPort:      to.Ptr[int32](10000),
					FrontendPort:     to.Ptr[int32](10000),
					LoadDistribution: to.Ptr("Default"),
					ProbePort:        to.Ptr[int32](10000),
					ProbeProtocol:    to.Ptr(armservicefabricmanagedclusters.ProbeProtocolHTTP),
					Protocol:         to.Ptr(armservicefabricmanagedclusters.ProtocolTCP),
				},
			},
			NetworkSecurityRules: []*armservicefabricmanagedclusters.NetworkSecurityRule{
				{
					Name:        to.Ptr("TestName"),
					Description: to.Ptr("Test description"),
					Access:      to.Ptr(armservicefabricmanagedclusters.AccessAllow),
					DestinationAddressPrefixes: []*string{
						to.Ptr("*"),
					},
					DestinationPortRanges: []*string{
						to.Ptr("*"),
					},
					Direction: to.Ptr(armservicefabricmanagedclusters.DirectionInbound),
					Priority:  to.Ptr[int32](1010),
					SourceAddressPrefixes: []*string{
						to.Ptr("*"),
					},
					SourcePortRanges: []*string{
						to.Ptr("*"),
					},
					Protocol: to.Ptr(armservicefabricmanagedclusters.NsgProtocolTCP),
				},
				{
					Name:                     to.Ptr("AllowARM"),
					Access:                   to.Ptr(armservicefabricmanagedclusters.AccessAllow),
					DestinationAddressPrefix: to.Ptr("*"),
					DestinationPortRange:     to.Ptr("33500-33699"),
					Direction:                to.Ptr(armservicefabricmanagedclusters.DirectionInbound),
					Priority:                 to.Ptr[int32](2002),
					SourceAddressPrefix:      to.Ptr("AzureResourceManager"),
					SourcePortRange:          to.Ptr("*"),
					Protocol:                 to.Ptr(armservicefabricmanagedclusters.NsgProtocol("*")),
				},
			},
			PublicIPPrefixID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.Network/publicIPPrefixes/myPublicIPPrefix"),
			PublicIPv6PrefixID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.Network/publicIPPrefixes/myPublicIPv6Prefix"),
			ServiceEndpoints: []*armservicefabricmanagedclusters.ServiceEndpoint{
				{
					Locations: []*string{
						to.Ptr("eastus2"),
						to.Ptr("usnorth"),
					},
					Service: to.Ptr("Microsoft.Storage"),
				},
			},
			UpgradeDescription: &armservicefabricmanagedclusters.ClusterUpgradePolicy{
				DeltaHealthPolicy: &armservicefabricmanagedclusters.ClusterUpgradeDeltaHealthPolicy{
					MaxPercentDeltaUnhealthyApplications:       to.Ptr[int32](40),
					MaxPercentDeltaUnhealthyNodes:              to.Ptr[int32](20),
					MaxPercentUpgradeDomainDeltaUnhealthyNodes: to.Ptr[int32](40),
				},
				ForceRestart: to.Ptr(false),
				HealthPolicy: &armservicefabricmanagedclusters.ClusterHealthPolicy{
					MaxPercentUnhealthyApplications: to.Ptr[int32](30),
					MaxPercentUnhealthyNodes:        to.Ptr[int32](10),
				},
				MonitoringPolicy: &armservicefabricmanagedclusters.ClusterMonitoringPolicy{
					HealthCheckRetryTimeout:   to.Ptr("00:55:00"),
					HealthCheckStableDuration: to.Ptr("00:45:00"),
					HealthCheckWaitDuration:   to.Ptr("00:05:00"),
					UpgradeDomainTimeout:      to.Ptr("03:00:00"),
					UpgradeTimeout:            to.Ptr("12:00:00"),
				},
			},
			UseCustomVnet:   to.Ptr(true),
			ZonalResiliency: to.Ptr(true),
			ZonalUpdateMode: to.Ptr(armservicefabricmanagedclusters.ZonalUpdateModeFast),
		},
		SKU: &armservicefabricmanagedclusters.SKU{
			Name: to.Ptr(armservicefabricmanagedclusters.SKUNameBasic),
		},
		Tags: map[string]*string{},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armservicefabricmanagedclusters.ManagedClustersClientCreateOrUpdateResponse{
	// 	ManagedCluster: &armservicefabricmanagedclusters.ManagedCluster{
	// 		Name: to.Ptr("myCluster"),
	// 		Type: to.Ptr("Microsoft.ServiceFabric/managedClusters"),
	// 		Etag: to.Ptr("W/\"636462502169240745\""),
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster"),
	// 		Location: to.Ptr("eastus"),
	// 		Properties: &armservicefabricmanagedclusters.ManagedClusterProperties{
	// 			AddonFeatures: []*armservicefabricmanagedclusters.ManagedClusterAddOnFeature{
	// 				to.Ptr(armservicefabricmanagedclusters.ManagedClusterAddOnFeatureDNSService),
	// 				to.Ptr(armservicefabricmanagedclusters.ManagedClusterAddOnFeatureBackupRestoreService),
	// 				to.Ptr(armservicefabricmanagedclusters.ManagedClusterAddOnFeatureResourceMonitorService),
	// 			},
	// 			AdminUserName: to.Ptr("vmadmin"),
	// 			AllocatedOutboundPorts: to.Ptr[int32](0),
	// 			AllowRdpAccess: to.Ptr(true),
	// 			ApplicationTypeVersionsCleanupPolicy: &armservicefabricmanagedclusters.ApplicationTypeVersionsCleanupPolicy{
	// 				MaxUnusedVersionsToKeep: to.Ptr[int32](3),
	// 			},
	// 			AutoGeneratedDomainNameLabelScope: to.Ptr(armservicefabricmanagedclusters.AutoGeneratedDomainNameLabelScopeSubscriptionReuse),
	// 			AuxiliarySubnets: []*armservicefabricmanagedclusters.Subnet{
	// 				{
	// 					Name: to.Ptr("testSubnet1"),
	// 					EnableIPv6: to.Ptr(true),
	// 					NetworkSecurityGroupID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/networkSecurityGroups/sn1"),
	// 					PrivateEndpointNetworkPolicies: to.Ptr(armservicefabricmanagedclusters.PrivateEndpointNetworkPoliciesEnabled),
	// 					PrivateLinkServiceNetworkPolicies: to.Ptr(armservicefabricmanagedclusters.PrivateLinkServiceNetworkPoliciesEnabled),
	// 				},
	// 			},
	// 			ClientConnectionPort: to.Ptr[int32](19000),
	// 			ClusterCertificateThumbprints: []*string{
	// 				to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622"),
	// 			},
	// 			ClusterCodeVersion: to.Ptr("7.1.168.9494"),
	// 			ClusterID: to.Ptr("92584666-9889-4ae8-8d02-91902923d37f"),
	// 			ClusterState: to.Ptr(armservicefabricmanagedclusters.ClusterStateWaitingForNodes),
	// 			ClusterUpgradeMode: to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeModeManual),
	// 			DdosProtectionPlanID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/ddosProtectionPlans/myDDoSProtectionPlan"),
	// 			DNSName: to.Ptr("mycluster"),
	// 			EnableAutoOSUpgrade: to.Ptr(true),
	// 			EnableHTTPGatewayExclusiveAuthMode: to.Ptr(true),
	// 			EnableIPv6: to.Ptr(true),
	// 			EnableServicePublicIP: to.Ptr(true),
	// 			FabricSettings: []*armservicefabricmanagedclusters.SettingsSectionDescription{
	// 				{
	// 					Name: to.Ptr("ManagedIdentityTokenService"),
	// 					Parameters: []*armservicefabricmanagedclusters.SettingsParameterDescription{
	// 						{
	// 							Name: to.Ptr("IsEnabled"),
	// 							Value: to.Ptr("true"),
	// 						},
	// 					},
	// 				},
	// 			},
	// 			Fqdn: to.Ptr("mycluster.eastus.cloudapp.azure.com"),
	// 			HTTPGatewayConnectionPort: to.Ptr[int32](19080),
	// 			HTTPGatewayTokenAuthConnectionPort: to.Ptr[int32](19081),
	// 			IPTags: []*armservicefabricmanagedclusters.IPTag{
	// 				{
	// 					IPTagType: to.Ptr("FirstPartyUsage"),
	// 					Tag: to.Ptr("SQL"),
	// 				},
	// 			},
	// 			IPv6Address: to.Ptr("0000:0000:0000:0000:0000:0000:0000:0000"),
	// 			LoadBalancingRules: []*armservicefabricmanagedclusters.LoadBalancingRule{
	// 				{
	// 					BackendPort: to.Ptr[int32](80),
	// 					FrontendPort: to.Ptr[int32](80),
	// 					ProbePort: to.Ptr[int32](80),
	// 					ProbeProtocol: to.Ptr(armservicefabricmanagedclusters.ProbeProtocolHTTP),
	// 					Protocol: to.Ptr(armservicefabricmanagedclusters.Protocol("http")),
	// 				},
	// 				{
	// 					BackendPort: to.Ptr[int32](443),
	// 					FrontendPort: to.Ptr[int32](443),
	// 					ProbePort: to.Ptr[int32](443),
	// 					ProbeProtocol: to.Ptr(armservicefabricmanagedclusters.ProbeProtocolHTTP),
	// 					Protocol: to.Ptr(armservicefabricmanagedclusters.Protocol("http")),
	// 				},
	// 				{
	// 					BackendPort: to.Ptr[int32](10000),
	// 					FrontendPort: to.Ptr[int32](10000),
	// 					LoadDistribution: to.Ptr("Default"),
	// 					ProbePort: to.Ptr[int32](10000),
	// 					ProbeProtocol: to.Ptr(armservicefabricmanagedclusters.ProbeProtocolTCP),
	// 					Protocol: to.Ptr(armservicefabricmanagedclusters.ProtocolTCP),
	// 				},
	// 			},
	// 			NetworkSecurityRules: []*armservicefabricmanagedclusters.NetworkSecurityRule{
	// 				{
	// 					Name: to.Ptr("TestName"),
	// 					Description: to.Ptr("Test description"),
	// 					Access: to.Ptr(armservicefabricmanagedclusters.AccessAllow),
	// 					DestinationAddressPrefixes: []*string{
	// 						to.Ptr("*"),
	// 					},
	// 					DestinationPortRanges: []*string{
	// 						to.Ptr("*"),
	// 					},
	// 					Direction: to.Ptr(armservicefabricmanagedclusters.DirectionInbound),
	// 					Priority: to.Ptr[int32](1010),
	// 					SourceAddressPrefixes: []*string{
	// 						to.Ptr("*"),
	// 					},
	// 					SourcePortRanges: []*string{
	// 						to.Ptr("*"),
	// 					},
	// 					Protocol: to.Ptr(armservicefabricmanagedclusters.NsgProtocolTCP),
	// 				},
	// 				{
	// 					Name: to.Ptr("AllowARM"),
	// 					Access: to.Ptr(armservicefabricmanagedclusters.AccessAllow),
	// 					DestinationAddressPrefix: to.Ptr("*"),
	// 					DestinationPortRange: to.Ptr("33500-33699"),
	// 					Direction: to.Ptr(armservicefabricmanagedclusters.DirectionInbound),
	// 					Priority: to.Ptr[int32](2002),
	// 					SourceAddressPrefix: to.Ptr("AzureResourceManager"),
	// 					SourcePortRange: to.Ptr("*"),
	// 					Protocol: to.Ptr(armservicefabricmanagedclusters.NsgProtocol("*")),
	// 				},
	// 			},
	// 			ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateCreating),
	// 			PublicIPPrefixID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.Network/publicIPPrefixes/myPublicIPPrefix"),
	// 			PublicIPv6PrefixID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.Network/publicIPPrefixes/myPublicIPv6Prefix"),
	// 			ServiceEndpoints: []*armservicefabricmanagedclusters.ServiceEndpoint{
	// 				{
	// 					Locations: []*string{
	// 						to.Ptr("eastus2"),
	// 						to.Ptr("usnorth"),
	// 					},
	// 					Service: to.Ptr("Microsoft.Storage"),
	// 				},
	// 			},
	// 			UpgradeDescription: &armservicefabricmanagedclusters.ClusterUpgradePolicy{
	// 				DeltaHealthPolicy: &armservicefabricmanagedclusters.ClusterUpgradeDeltaHealthPolicy{
	// 					MaxPercentDeltaUnhealthyApplications: to.Ptr[int32](40),
	// 					MaxPercentDeltaUnhealthyNodes: to.Ptr[int32](20),
	// 					MaxPercentUpgradeDomainDeltaUnhealthyNodes: to.Ptr[int32](40),
	// 				},
	// 				ForceRestart: to.Ptr(false),
	// 				HealthPolicy: &armservicefabricmanagedclusters.ClusterHealthPolicy{
	// 					MaxPercentUnhealthyApplications: to.Ptr[int32](30),
	// 					MaxPercentUnhealthyNodes: to.Ptr[int32](10),
	// 				},
	// 				MonitoringPolicy: &armservicefabricmanagedclusters.ClusterMonitoringPolicy{
	// 					HealthCheckRetryTimeout: to.Ptr("00:55:00"),
	// 					HealthCheckStableDuration: to.Ptr("00:45:00"),
	// 					HealthCheckWaitDuration: to.Ptr("00:05:00"),
	// 					UpgradeDomainTimeout: to.Ptr("03:00:00"),
	// 					UpgradeTimeout: to.Ptr("12:00:00"),
	// 				},
	// 				UpgradeReplicaSetCheckTimeout: to.Ptr("49710.06:28:16"),
	// 			},
	// 			UseCustomVnet: to.Ptr(true),
	// 			ZonalResiliency: to.Ptr(true),
	// 			ZonalUpdateMode: to.Ptr(armservicefabricmanagedclusters.ZonalUpdateModeFast),
	// 		},
	// 		SKU: &armservicefabricmanagedclusters.SKU{
	// 			Name: to.Ptr(armservicefabricmanagedclusters.SKUNameBasic),
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}
