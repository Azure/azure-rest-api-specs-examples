package armmanagednetworkfabric_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/managednetworkfabric/armmanagednetworkfabric"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/d03c1964cb76ffd6884d10a1871bbe779a2f68ef/specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2023-02-01-preview/examples/NetworkFabrics_ListByResourceGroup_MaximumSet_Gen.json
func ExampleNetworkFabricsClient_NewListByResourceGroupPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armmanagednetworkfabric.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewNetworkFabricsClient().NewListByResourceGroupPager("rgNetworkFabrics", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.NetworkFabricsListResult = armmanagednetworkfabric.NetworkFabricsListResult{
		// 	Value: []*armmanagednetworkfabric.NetworkFabric{
		// 		{
		// 			Name: to.Ptr("FabricName"),
		// 			Type: to.Ptr("microsoft.managednetworkfabric/networkfabrics"),
		// 			ID: to.Ptr("/subscriptions/xxxxxx/resourceGroups/resourcegroupname/providers/Microsoft.ManagedNetworkFabric/networkFabrics/FabricName"),
		// 			SystemData: &armmanagednetworkfabric.SystemData{
		// 				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T11:01:18.007Z"); return t}()),
		// 				CreatedBy: to.Ptr("User@email.com"),
		// 				CreatedByType: to.Ptr(armmanagednetworkfabric.CreatedByTypeUser),
		// 				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T11:01:18.007Z"); return t}()),
		// 				LastModifiedBy: to.Ptr("User"),
		// 				LastModifiedByType: to.Ptr(armmanagednetworkfabric.CreatedByTypeUser),
		// 			},
		// 			Location: to.Ptr("eastuseuap"),
		// 			Tags: map[string]*string{
		// 				"key6468": to.Ptr(""),
		// 			},
		// 			Properties: &armmanagednetworkfabric.NetworkFabricProperties{
		// 				Annotation: to.Ptr("annotationValue"),
		// 				L2IsolationDomains: []*string{
		// 					to.Ptr("/subscriptions/xxxxx/resourceGroups/resourcegroupname/providers/Microsoft.ManagedNetworkFabric/l2IsolationDomains/l2IsolationDomainName")},
		// 					L3IsolationDomains: []*string{
		// 						to.Ptr("/subscriptions/xxxxx/resourceGroups/resourecegroupname/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/l3IsolationDomainName")},
		// 						Racks: []*string{
		// 							to.Ptr("/subscriptions/xxxxxx/resourceGroups/resourcegroupname/providers/Microsoft.ManagedNetworkFabric/networkRacks/fab3AggRack"),
		// 							to.Ptr("/subscriptions/xxxxxx/resourceGroups/resourcegroupname/providers/Microsoft.ManagedNetworkFabric/networkRacks/fab3CompRack1"),
		// 							to.Ptr("/subscriptions/xxxxxx/resourceGroups/resourcegroupname/providers/Microsoft.ManagedNetworkFabric/networkRacks/fab3CompRack2")},
		// 							FabricASN: to.Ptr[int32](29249),
		// 							IPv4Prefix: to.Ptr("10.18.0.0/19"),
		// 							IPv6Prefix: to.Ptr("3FFE:FFFF:0:CD40::/59"),
		// 							ManagementNetworkConfiguration: &armmanagednetworkfabric.ManagementNetworkConfiguration{
		// 								InfrastructureVPNConfiguration: &armmanagednetworkfabric.VPNConfigurationProperties{
		// 									AdministrativeState: to.Ptr(armmanagednetworkfabric.EnabledDisabledStateEnabled),
		// 									NetworkToNetworkInterconnectID: to.Ptr("/subscriptions/xxxxxx/resourceGroups/resourcegroupname/providers/Microsoft.ManagedNetworkFabric/networkFabrics/FabricName/networkToNetworkInterconnects/DefaultNNI"),
		// 									OptionAProperties: &armmanagednetworkfabric.OptionAProperties{
		// 										PrimaryIPv4Prefix: to.Ptr("20.0.0.12/30"),
		// 										PrimaryIPv6Prefix: to.Ptr("3FFE:FFFF:0:CD30::a8/126"),
		// 										SecondaryIPv4Prefix: to.Ptr("20.0.0.13/30"),
		// 										SecondaryIPv6Prefix: to.Ptr("3FFE:FFFF:0:CD30::ac/126"),
		// 										BfdConfiguration: &armmanagednetworkfabric.FabricBfdConfiguration{
		// 											Interval: to.Ptr[int32](8),
		// 											Multiplier: to.Ptr[int32](29),
		// 										},
		// 										Mtu: to.Ptr[int32](5892),
		// 										PeerASN: to.Ptr[int32](42666),
		// 										VlanID: to.Ptr[int32](2724),
		// 									},
		// 									OptionBProperties: &armmanagednetworkfabric.OptionBPropertiesAutoGenerated{
		// 										ExportRouteTargets: []*string{
		// 											to.Ptr("65046:10039")},
		// 											ImportRouteTargets: []*string{
		// 												to.Ptr("65046:10039")},
		// 											},
		// 											PeeringOption: to.Ptr(armmanagednetworkfabric.PeeringOptionOptionA),
		// 										},
		// 										WorkloadVPNConfiguration: &armmanagednetworkfabric.VPNConfigurationProperties{
		// 											AdministrativeState: to.Ptr(armmanagednetworkfabric.EnabledDisabledStateEnabled),
		// 											NetworkToNetworkInterconnectID: to.Ptr("/subscriptions/xxxxxx/resourceGroups/resourcegroupname/providers/Microsoft.ManagedNetworkFabric/networkFabrics/FabricName/networkToNetworkInterconnect/DefaultNNI"),
		// 											OptionAProperties: &armmanagednetworkfabric.OptionAProperties{
		// 												PrimaryIPv4Prefix: to.Ptr("10.0.0.14/30"),
		// 												PrimaryIPv6Prefix: to.Ptr("2FFE:FFFF:0:CD30::a7/126"),
		// 												SecondaryIPv4Prefix: to.Ptr("10.0.0.15/30"),
		// 												SecondaryIPv6Prefix: to.Ptr("2FFE:FFFF:0:CD30::ac/126"),
		// 												BfdConfiguration: &armmanagednetworkfabric.FabricBfdConfiguration{
		// 													Interval: to.Ptr[int32](8),
		// 													Multiplier: to.Ptr[int32](29),
		// 												},
		// 												Mtu: to.Ptr[int32](5892),
		// 												PeerASN: to.Ptr[int32](42666),
		// 												VlanID: to.Ptr[int32](2724),
		// 											},
		// 											OptionBProperties: &armmanagednetworkfabric.OptionBPropertiesAutoGenerated{
		// 												ExportRouteTargets: []*string{
		// 													to.Ptr("65047:10080")},
		// 													ImportRouteTargets: []*string{
		// 														to.Ptr("65046:10050")},
		// 													},
		// 													PeeringOption: to.Ptr(armmanagednetworkfabric.PeeringOptionOptionA),
		// 												},
		// 											},
		// 											NetworkFabricControllerID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.ManagedNetworkFabric/networkFabricControllers/fabricControllerName"),
		// 											NetworkFabricSKU: to.Ptr("M4-A400-A100-C16-aa"),
		// 											OperationalState: to.Ptr(armmanagednetworkfabric.NetworkFabricOperationalStateProvisioning),
		// 											ProvisioningState: to.Ptr(armmanagednetworkfabric.ProvisioningStateSucceeded),
		// 											RackCount: to.Ptr[int32](4),
		// 											RouterID: to.Ptr("routerId"),
		// 											ServerCountPerRack: to.Ptr[int32](8),
		// 											TerminalServerConfiguration: &armmanagednetworkfabric.TerminalServerConfiguration{
		// 												PrimaryIPv4Prefix: to.Ptr("20.0.0.12/30"),
		// 												PrimaryIPv6Prefix: to.Ptr("3FFE:FFFF:0:CD30::a8/126"),
		// 												SecondaryIPv4Prefix: to.Ptr("20.0.0.14/30"),
		// 												SecondaryIPv6Prefix: to.Ptr("3FFE:FFFF:0:CD30::ac/126"),
		// 												SerialNumber: to.Ptr("123456"),
		// 												Username: to.Ptr("username"),
		// 												NetworkDeviceID: to.Ptr("/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.ManagedNetworkFabric/networkDevices/networkDeviceName"),
		// 											},
		// 										},
		// 								}},
		// 							}
	}
}
